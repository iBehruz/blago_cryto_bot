const TelegramBot = require('node-telegram-bot-api');

// replace the value below with the Telegram token you receive from @BotFather
const token = '5803547277:AAGYmA7WjcyB_W6Pna60CWe10uqVPE0ORDo';

// Create a bot that uses 'polling' to fetch new updates
const bot = new TelegramBot(token, {polling: true});

const session = {
  "12356454": {
    "availeable_commands": [],
    "availeable_routes": [],
    "current": "start"
  }
};

const routes = {
  "start": {text: "/start", back: null},
  "buy": { text: "–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", back: "start"},
  "sell": { text: "–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", back: "start"},
  "active_orders": { text: "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏", back: "start"},
  "colculator": { text: "–ö–∞–ª–∫—É–ª—è—Ç–æ—Ä", back: "start"},
  "referal": { text: "–†–µ—Ñ–µ—Ä–∞–ª–∫–∞", back: "start"},
  "promocodes": { text: "–ü—Ä–æ–º–æ–∫–æ–¥—ã", back: "start"},
  "contacts": { text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", back: "start"},
  "feadback":{ text: "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", back: "start"},
  "LTC": {text: "BUY_LTC", back: "buy"},
  "enter_LTC": {text: "ENTER_LTC", back: "buy"},
}


bot.onText(/ /, async function (msg)  {
  
  let text = ".!", options = {};



  switch(msg.data){
    case "start":
        options = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "LTC",
                  callback_data: "BUYLTC"
                }
              ]
            ]
          }, parse_mode: 'Markdown'
        };
      break;
    case "buy":

      break;
    case "sell":

      break;
    default:

      break
  }
  
  
  
  
  bot.sendMessage(msg.chat.id, text, options);
   
 
});

function onCallbackQuery(){

}

function initRoute(route){
  session["12356454"].availeable_routes = [];
  session["12356454"].current = route;
  for(let el in routes){
     if(routes[el].back == route){
        session["12356454"].availeable_routes.push(el);
     }
  }
}
//callback_query,  onText, message

runApp();



function start(msg, match){
  
  const chatId = msg.chat.id;
  console.clear();
  console.log(msg);
  let md = `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é ${msg.from.first_name}!
  –£ —Ç–µ–±—è –±–æ–ª—å—à–æ–π –æ–±–º–µ–Ω?!
  –¢–æ–≥–¥–∞ —Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É...
  
  –í–∞—à —Ç–µ–∫—É—â–∏–π –±–æ–Ω—É—Å: 0 —Å—É–º
  –í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 0
  –ö–æ–º–∞–Ω–¥—ã /start /course /echo /help`;

  bot.sendMessage(chatId, md, {
    reply_markup: {
      // selective: true,
      // one_time_keyboard: true,
      resize_keyboard: true,
      keyboard: [
        [{text: "üíµ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"}, {text: "ü•á –ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"}],
        [{text: "üü¢ –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏"}],
        [{text: "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"}],
        [{text: "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞"}, {text: "üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã"}],
        [{text: "üìò –ö–æ–Ω—Ç–∞–∫—Ç—ã"}, {text: "üì≠ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"}],
      ],
    }})
}




function runApp() {
  bot.setMyCommands(
    [
      {command: '/start', description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
      {command: '/course', description: "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç"},
    ]
  );
  
  bot.onText(/\/start/, (msg, match) => {
    start(msg, match);
  });
  bot.onText(/‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É/, (msg, match) => {
    start(msg, match);
  });
  
  bot.onText(/üíµ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É/, (msg, match) => {
    const chatId = msg.chat.id;

    let md2 = `–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É`;

    bot.sendMessage(chatId, md2, {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "LTC",
              callback_data: "BUYLTC"
            }
          ]
        ]
      }, parse_mode: 'Markdown'
    },);
   
  });


  
  bot.on('message', (msg, match)=>{
    console.clear();
    console.log(msg,match);
  })
  
  bot.on('callback_query', msg=>{
  
    console.log(msg, msg.message.chat.id);
   // bot.deleteMessage(chat_id, message_id);


  //   let chat_id = msg.chat.id;
  //   let message_id = msg.message_id;
  if(msg.data == 'BUYLTC'){
    bot.deleteMessage(msg.message.chat.id, msg.message.message_id); //then delete
    let text = "–í–µ–¥–∏—Ç–µ —Å—É–º–º—É LTC, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ –∫—É—Ä—Å—É 76$ ~ 951600 —Å—É–º \n –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 0,17 LTC";
    bot.sendMessage(msg.message.chat.id, text,
    {
      reply_markup: {
        // selective: true,
        // one_time_keyboard: true,
        resize_keyboard: true,
        keyboard: [
          [{text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É"}],
        ],
      }});


  }
    
    //console.log(msg.data);


    // bot.editMessageReplyMarkup({
    //         inline_keyboard: [
    //             [
    //               {
    //                 text: "<- –ù–∞–∑–∞–¥",
    //                 callback_data: "BACK"
    //             },
    //                 {
    //                     text: "LTC",
    //                     callback_data: "LTC"
    //                 }
    //             ],
    //         ]
      // }, {
      //   chat_id: msg.from.id, 
      //   message_id: msg.message.message_id
      // });
  
    
  })

  

  console.log("app is running...");
 return true;
}





module.exports = bot;
